{"meta":{"title":"HuangPing's blog","subtitle":null,"description":"今天想吃瓜","author":"Bobo Wang","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2015-10-19T22:49:50.000Z","updated":"2018-07-20T09:13:26.790Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-20T09:10:37.229Z","updated":"2018-07-20T09:10:37.229Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue组件间通信","slug":"vue-tem-mess","date":"2018-07-20T09:34:37.603Z","updated":"2018-07-20T09:35:11.085Z","comments":true,"path":"2018/07/20/vue-tem-mess/","link":"","permalink":"http://yoursite.com/2018/07/20/vue-tem-mess/","excerpt":"","text":"Vue组件间通信首先衷心的感谢展大神的指导我们在进行基于Vue的项目开发时，组件间的数据通信，是我们必须考虑的。 注： 本文所实现的方式，是在不考虑vuex下所做的实现。 我把组件间的关系，大致分为三种： 父子组件 123&lt;parent&gt; &lt;child&gt;&lt;/child&gt;&lt;/parent&gt; 拥有类似结构，parent组件包含child组件，则child组件是parent的子组件，parent组件是child组件的父组件。 兄弟组件 12&lt;item&gt;&lt;/item&gt;&lt;item&gt;&lt;/item&gt; 两个item组件在结构上同级，我们称之互为兄弟组件。 跨多级组件 12345678&lt;list&gt; &lt;item&gt; &lt;message&gt;&lt;message&gt; &lt;/item&gt;&lt;/list&gt;&lt;dialog&gt; &lt;content&gt;&lt;/content&gt;&lt;/dialog&gt; 在这个结构中，&lt;list&gt;和&lt;message&gt;并不是直接的父子组件，中间还跨了一个级，在实际场景中，还会有跨更多层级的组件关系。&lt;message&gt; 和 &lt;content&gt; 组件两个既不是兄弟组件，又不是父子组件，而是跨了兄弟，父子的多级关系，实际场景中也会有发生交互。 那么这三种关系的组件，我们应该如何进行组件通信？ 父子组件通信要讲父子组件的通信，首先，我们需要了解 vue 组件的 特性。 单向数据流，数据自上而下。 Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。 事件自下而上。 组件内部状态的变化，通过事件往上冒泡，通知上一级组件，由上一级组件监听事件，并触发相应回调。 基于以上，父子组件通信推荐的方式是： 父组件通过props将状态传到子组件，子组件通过事件将状态冒泡到父组件，由父组件监听触发回调改变状态。 parent.vue12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class=\"parent\"&gt; &lt;child :name=\"name\" @name-change=\"nameChange\" &gt; &lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Child from './child';export default &#123; name: 'parent', data () &#123; return &#123; name: 'Jack' &#125;; &#125; methods: &#123; nameChange(name) &#123; this.name = name; &#125; &#125;, components: &#123; Child &#125;&#125;&lt;/script&gt; child.vue123456789101112131415161718192021222324&lt;template&gt; &lt;div class=\"child\"&gt; &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt; &lt;button @click=\"onClick\"&gt;change name&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'child', props: &#123; name: &#123; type: String, defualt() &#123; return ''; &#125; &#125; &#125;, methods: &#123; onClick() &#123; this.$emit('name-change', 'John'); &#125; &#125;&#125;&lt;/script&gt; 在某些例子或个人项目中，经常有发现到在子组件中使用 this.$parent 直接改变父组件的状态，诚然这种方式能够简化两个深耦合的组件的数据通信，在一些简单的场景中也会比较方便，但其实并不推荐采用这种方式实现父子组件通信，这样做的后果就是导致了数据流的不明确性，牺牲了单项数据流的简洁性，数据的变化流动变得不易于理解。 在父组件中使用this.$child 直接调用子组件的方法，简单场景虽然适用，但是数据改变会不确定，复杂的场景下无法调用 子组件watch监听 props数据变化（input输入）执行任务：为避免程序执行频率过高，设定定时器parent.vue1234&lt;template&gt; &lt;input v-model.trim=\"message\" &gt;&lt;/el-input&gt; &lt;child :checkValue='message'&gt;&lt;/child&gt;&lt;/template&gt; child.vue1234567891011121314151617181920212223242526272829303132333435props:[\"message\"],watch: &#123; message() &#123; clearInterval(this.timer); let vm = this; this.timer = setInterval(function()&#123; vm.getSearList() &#125;,1000) &#125; &#125;,``` ### 兄弟组件通信、跨多级组件通信这两种组件关系，并没有直接的联系。如兄弟组件，我们会很自然的想到使用他们的父级组件作为中转，将 `子组件1` 的状态通信到父组件，再由父组件通过 `props` 流向 `子组件2` ，反之亦然，但是如果兄弟组件间的交互复杂，但又与父组件没有存在直接的交互关联，父组件在这个过程当中，承担了多余的职责。又如跨多级组件，上述例子中，`&lt;list&gt;`和`&lt;message&gt;`之间间隔了多层，如果我们继续使用父子组件通信`prop`和事件冒泡，中间的层需要重复的定义`prop`和事件，这显然也导致了它们承担了多余的职责。 `&lt;message&gt;` 和 `&lt;content&gt;` 组件之间，更是在结构上没有关联，`prop`和事件冒泡显得十分乏力，无法直接完成通信。那么这两种组件关系，该如何完成通信，又不对它们中间层级组件，或者父级组件造成多余的干扰？由于两种组件关系没有直接的关联，所以我们需要有一个桥梁，能够直接连接它们，使它们变得有关联。即，我们需要一个`中间件`。官方给我们的解决方案是`vuex`，但我认为它更多是的作为全局状态的管理，使用它作为某两个组件的通信中间件，显得大材小用，所以我这里不做讨论。我所采取的方案是使用 自定义事件 完成组件通信。__实例化Vue__`vue`已实现了一套事件系统，可以很方便的使用它来完成我们的组件通信。``` javascriptlet middleware = new Vue();export defualt middleware; message.vue12345678910111213export default &#123; name: 'message', data () &#123; return &#123; info: 'hello' &#125;; &#125;, methods: &#123; sayHello() &#123; middleware.$emit('say-hello', this.info); &#125; &#125;&#125;; content.vue12345678910111213141516171819202122232425262728293031323334export default &#123; name: 'content', data() &#123; return &#123; info: ''; &#125; &#125;, created() &#123; middleware.$on('say-hello', info =&gt; &#123; this.info = info; &#125;); &#125;&#125;``` 我们通过 `middleware`， 在`content.vue`注册了`say-hello`事件，当`message.vue`触发该事件时，`content.vue`监听到事件触发回调，从而实现了状态传导。组件数据传导不再是通过`props`传导，而是通过事件进行通信。__如果不使用实例化Vue的方式去完成，我们也可以自己实现一套自定义事件。__ 设计更加个性化的自定义事件，满足项目中的多样的使用场景。``` javascriptclass Event&#123; constructor() &#123; // some props &#125; on() &#123; // do something &#125; emit() &#123; // do something &#125; off() &#123; // do somethig &#125;&#125; 总结复杂结构的组件通信，实现它们的通信，关键是实现中间件作为桥梁连接它们，无论是使用自定义事件，还是其他的方案。","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"创建标签和分类","slug":"add-nav","date":"2018-07-20T08:12:03.656Z","updated":"2018-07-20T09:16:00.710Z","comments":true,"path":"2018/07/20/add-nav/","link":"","permalink":"http://yoursite.com/2018/07/20/add-nav/","excerpt":"","text":"创建 分类和标签创建了相应的分类和标签之后，侧边栏的nav 才能使用 添加分类1234hexo new page \"tags\" hexo new page \"categories\"//然后进入到hexo\\source\\categories路径下打开index.md文件，编辑保存。 在主题配置文件里设置12345menu: home: / archives: archives categories: categories // 如果有问题在前面加一个反斜杠 tags: tags 编辑 /tags/index.md /categories/index.md12345type: \"tags\"layout: \"tags\"type: \"categories\"layout: \"categories\"","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"域名知识","slug":"domain-knowlege","date":"2018-07-18T07:36:28.757Z","updated":"2018-07-20T09:18:56.445Z","comments":true,"path":"2018/07/18/domain-knowlege/","link":"","permalink":"http://yoursite.com/2018/07/18/domain-knowlege/","excerpt":"","text":"域名知识一、ICANNICANN(Internet Corporation for Assigned Names and Numbers):全世界域名的最高管理机构，负责管理全世界域名系统运作，规定顶级域名TLD(top level domain) 二、顶级域名（TLD）顶级域名：最高层级的域名。即网址的最后一部分（ps: www.example.com 的TLD就是.com） 分类：一般性顶级域名（gTLD），比如.com .net; 国别级顶级域名（ccTLD）：代表不同国家地区，比如 .cn(中国) 、.io(英属印度洋领地) 三、其他域名从右往左，依次是顶级域名，二级域名、三级域名…http://uni.bestwehotel.com : 顶级域名.com 、二级域名.bestwehotel 、 三级域名 uni 四、顶级域名托管商ICANN不会去管理这些顶级域名，只会与托管商联系目前，世界最大的顶级域名托管商是美国的 Verisign 公司。 五、根域名顶级域名既根域名（root domain）所有域名查询都必须先查询根域名，因为只有根域名才能告诉你，某个顶级域名由那台服务器管理，ICANN维护着一张表，记载顶级域名和对应的托管商。 比如，需要访问www.example.com,就必须先询问ICANN的根域名列表，他会告诉你.com域名由Verisign托管，找到Verisign,他会告诉你example.com服务器在哪里。 由于根域名列表很少变化，大多数DNS服务商都会提供它的缓存，所以根域名查询不会那么频繁。 六、NDS根区根域名列表的正式名称是DNS根区,ICANN官网可以查看这个根区文件 七、根域名服务器DNS根域名服务器：保存DNS根区文件的服务器 引自：阮一峰的网络日志","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/网络/"}]},{"title":"javascript 运行机制","slug":"js-worker","date":"2018-07-18T02:51:53.663Z","updated":"2018-07-20T06:31:51.889Z","comments":true,"path":"2018/07/18/js-worker/","link":"","permalink":"http://yoursite.com/2018/07/18/js-worker/","excerpt":"","text":"7月份知识点整理 js javascript 运行机制 域名知识 前端进阶必备：JavaScript 内存机制 浏览器线程 http cors与 xss javascript 运行机制只要主线程空了，就会去读取”任务队列” 一、为什么是单线程 javascript 语言的一大特点就是单线程 javascript的主要用途就是与用户互动，操作DOM,这就决定了他只能是单线程，否则会带来很复杂的问题（ps：假定javascript有两个线程，一个线程在某个DoM上添加节点，但是在另外一个线程删除节点，那这时候应该听那个线程的？） 利用多核CPU计算能力，HTML5提出Web Worker标准，允许javascript创建多个线程，但子线程完全受主线程控制，并且不能操作DOM(PS:并未改变单线程性质) 二、任务队列单线程：所有任务都必需排队，前一个任务结束才会执行下一个任务的。 任务：同步任务、异步任务 同步任务：在主线程上排队执行的任务，只有前一个执行完毕，才能执行后一个任务。 异步任务： 不进入主线程，而是进入“任务队列”的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，改任务才会进入主线程 运行机制：事件循环（Event Loop） 1、所有同步任务都在主线程上执行，形成一个执行栈。 2、只要异步任务有了运行结果，就在任务队列之中放置一个事件 3、一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，于是那些等待状态的异步任务结束等待状态，开始执行 4、主线程不断重复上面的步骤。 事件和回调函数任务队列：一个事件队列： IO设备事件，用户产生事件（比如鼠标点击，滚动…）。只要指定回调函数，事件发生时就会进入”任务队列”，等待主线程读取 任务队列：先进先出的数据结构 （定时器功能的事件：主线程要先检查执行事件，到了规定时间才能放回主线程） 引自：阮一峰的网络日志","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]}]}