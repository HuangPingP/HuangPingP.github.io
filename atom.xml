<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuangPing&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-20T09:35:11.085Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bobo Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue组件间通信</title>
    <link href="http://yoursite.com/2018/07/20/vue-tem-mess/"/>
    <id>http://yoursite.com/2018/07/20/vue-tem-mess/</id>
    <published>2018-07-20T09:34:37.603Z</published>
    <updated>2018-07-20T09:35:11.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue组件间通信"><a href="#Vue组件间通信" class="headerlink" title="Vue组件间通信"></a>Vue组件间通信</h1><p>首先衷心的感谢展大神的指导<br>我们在进行基于<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a>的项目开发时，组件间的数据通信，是我们必须考虑的。</p><blockquote><p>注： 本文所实现的方式，是在不考虑<code>vuex</code>下所做的实现。</p></blockquote><p>我把组件间的关系，大致分为三种：</p><ol><li><p>父子组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 拥有类似结构，<code>parent</code>组件包含<code>child</code>组件，则<code>child</code>组件是<code>parent</code>的子组件，<code>parent</code>组件是<code>child</code>组件的父组件。</p></li><li><p>兄弟组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 两个<code>item</code>组件在结构上同级，我们称之互为兄弟组件。</p></li><li><p>跨多级组件</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span>&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在这个结构中，<code>&lt;list&gt;</code>和<code>&lt;message&gt;</code>并不是直接的父子组件，中间还跨了一个级，在实际场景中，还会有跨更多层级的组件关系。<code>&lt;message&gt;</code> 和 <code>&lt;content&gt;</code> 组件两个既不是兄弟组件，又不是父子组件，而是跨了兄弟，父子的多级关系，实际场景中也会有发生交互。</p></li></ol><p>那么这三种关系的组件，我们应该如何进行组件通信？</p><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>要讲父子组件的通信，首先，我们需要了解 <code>vue</code> 组件的 特性。</p><ol><li><p>单向数据流，数据自上而下。</p><blockquote><p>Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为<br>了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。</p></blockquote></li><li><p>事件自下而上。</p><p> 组件内部状态的变化，通过事件往上冒泡，通知上一级组件，由上一级组件监听事件，并触发相应回调。</p></li></ol><p>基于以上，父子组件通信推荐的方式是：</p><p>父组件通过<code>props</code>将状态传到子组件，子组件通过事件将状态冒泡到父组件，由父组件监听触发回调改变状态。</p><p><code>parent.vue</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">name-change</span>=<span class="string">"nameChange"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import Child from './child';</span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">    name: 'parent',</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="undefined">        return &#123;</span></span><br><span class="line"><span class="undefined">            name: 'Jack'</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        nameChange(name) &#123;</span></span><br><span class="line"><span class="undefined">            this.name = name;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">        Child</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>child.vue</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"onClick"</span>&gt;</span>change name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">    name: 'child',</span></span><br><span class="line"><span class="undefined">    props: &#123;</span></span><br><span class="line"><span class="undefined">        name: &#123;</span></span><br><span class="line"><span class="undefined">            type: String,</span></span><br><span class="line"><span class="undefined">            defualt() &#123;</span></span><br><span class="line"><span class="undefined">                return '';</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        onClick() &#123;</span></span><br><span class="line"><span class="undefined">            this.$emit('name-change', 'John');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在某些例子或个人项目中，经常有发现到在子组件中使用 <code>this.$parent</code> 直接改变父组件的状态，诚然这种方式能够简化两个深耦合的组件的数据通信，在一些简单的场景中也会比较方便，但其实并不推荐采用这种方式实现父子组件通信，这样做的后果就是导致了数据流的不明确性，牺牲了单项数据流的简洁性，数据的变化流动变得不易于理解。</p><p>在父组件中使用<code>this.$child</code> 直接调用子组件的方法，简单场景虽然适用，但是数据改变会不确定，复杂的场景下无法调用</p><p>子组件<code>watch</code>监听 <code>props</code>数据变化（input输入）执行任务：为避免程序执行频率过高，设定定时器<br><code>parent.vue</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">v-model.trim</span>=<span class="string">"message"</span> &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:checkValue</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>child.vue</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">props:[<span class="string">"message"</span>],</span><br><span class="line">watch: &#123;</span><br><span class="line">      message() &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">        <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          vm.getSearList()</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 兄弟组件通信、跨多级组件通信</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这两种组件关系，并没有直接的联系。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如兄弟组件，我们会很自然的想到使用他们的父级组件作为中转，将 `</span>子组件<span class="number">1</span><span class="string">` 的状态通信到父组件，再由父组件通过 `</span>props<span class="string">` 流向 `</span>子组件<span class="number">2</span><span class="string">` ，反之亦然，但是如果兄弟组件间的交互复杂，但又与父组件没有存在直接的交互关联，父组件在这个过程当中，承担了多余的职责。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">又如跨多级组件，上述例子中，`</span>&lt;list&gt;<span class="string">`和`</span>&lt;message&gt;<span class="string">`之间间隔了多层，如果我们继续使用父子组件通信`</span>prop<span class="string">`和事件冒泡，中间的层需要重复的定义`</span>prop<span class="string">`和事件，这显然也导致了它们承担了多余的职责。 `</span>&lt;message&gt;<span class="string">` 和 `</span>&lt;content&gt;<span class="string">` 组件之间，更是在结构上没有关联，`</span>prop<span class="string">`和事件冒泡显得十分乏力，无法直接完成通信。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">那么这两种组件关系，该如何完成通信，又不对它们中间层级组件，或者父级组件造成多余的干扰？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">由于两种组件关系没有直接的关联，所以我们需要有一个桥梁，能够直接连接它们，使它们变得有关联。即，我们需要一个`</span>中间件<span class="string">`。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">官方给我们的解决方案是`</span>vuex<span class="string">`，但我认为它更多是的作为全局状态的管理，使用它作为某两个组件的通信中间件，显得大材小用，所以我这里不做讨论。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我所采取的方案是使用 自定义事件 完成组件通信。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__实例化Vue__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>vue<span class="string">`已实现了一套事件系统，可以很方便的使用它来完成我们的组件通信。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="keyword">let</span> middleware = <span class="keyword">new</span> Vue();</span><br><span class="line"><span class="keyword">export</span> defualt middleware;</span><br></pre></td></tr></table></figure></p><p><code>message.vue</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'message'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            info: <span class="string">'hello'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sayHello() &#123;</span><br><span class="line">            middleware.$emit(<span class="string">'say-hello'</span>, <span class="keyword">this</span>.info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>content.vue</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'content'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            info: <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        middleware.$on(<span class="string">'say-hello'</span>, info =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.info = info;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">我们通过 `</span>middleware<span class="string">`， 在`</span>content.vue<span class="string">`注册了`</span>say-hello<span class="string">`事件，当`</span>message.vue<span class="string">`触发该事件时，`</span>content.vue<span class="string">`监听到事件触发回调，从而实现了状态传导。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">组件数据传导不再是通过`</span>props<span class="string">`传导，而是通过事件进行通信。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__如果不使用实例化Vue的方式去完成，我们也可以自己实现一套自定义事件。__ 设计更加个性化的自定义事件，满足项目中的多样的使用场景。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="comment">// some props</span></span><br><span class="line">    &#125;</span><br><span class="line">    on() &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    emit() &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    off() &#123;</span><br><span class="line">        <span class="comment">// do somethig</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>复杂结构的组件通信，实现它们的通信，关键是实现中间件作为桥梁连接它们，无论是使用自定义事件，还是其他的方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue组件间通信&quot;&gt;&lt;a href=&quot;#Vue组件间通信&quot; class=&quot;headerlink&quot; title=&quot;Vue组件间通信&quot;&gt;&lt;/a&gt;Vue组件间通信&lt;/h1&gt;&lt;p&gt;首先衷心的感谢展大神的指导&lt;br&gt;我们在进行基于&lt;a href=&quot;https://cn.vu
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>创建标签和分类</title>
    <link href="http://yoursite.com/2018/07/20/add-nav/"/>
    <id>http://yoursite.com/2018/07/20/add-nav/</id>
    <published>2018-07-20T08:12:03.656Z</published>
    <updated>2018-07-20T09:16:00.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建-分类和标签"><a href="#创建-分类和标签" class="headerlink" title="创建 分类和标签"></a>创建 分类和标签</h1><p>创建了相应的分类和标签之后，侧边栏的nav 才能使用</p><ul><li>添加分类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"tags"</span> </span><br><span class="line"></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"categories"</span></span><br><span class="line"><span class="comment">//然后进入到hexo\source\categories路径下打开index.md文件，编辑保存。</span></span><br></pre></td></tr></table></figure></li></ul><p>在主题配置文件里设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: <span class="regexp">/</span></span><br><span class="line"><span class="regexp">    archives: archives</span></span><br><span class="line"><span class="regexp">    categories: categories   /</span><span class="regexp">/ 如果有问题在前面加一个反斜杠</span></span><br><span class="line"><span class="regexp">    tags: tags</span></span><br></pre></td></tr></table></figure></p><ul><li>编辑 /tags/index.md /categories/index.md<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type: <span class="string">"tags"</span></span><br><span class="line">layout: <span class="string">"tags"</span></span><br><span class="line"></span><br><span class="line">type: <span class="string">"categories"</span></span><br><span class="line">layout: <span class="string">"categories"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建-分类和标签&quot;&gt;&lt;a href=&quot;#创建-分类和标签&quot; class=&quot;headerlink&quot; title=&quot;创建 分类和标签&quot;&gt;&lt;/a&gt;创建 分类和标签&lt;/h1&gt;&lt;p&gt;创建了相应的分类和标签之后，侧边栏的nav 才能使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加分类&lt;f
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>域名知识</title>
    <link href="http://yoursite.com/2018/07/18/domain-knowlege/"/>
    <id>http://yoursite.com/2018/07/18/domain-knowlege/</id>
    <published>2018-07-18T07:36:28.757Z</published>
    <updated>2018-07-20T09:18:56.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="域名知识"><a href="#域名知识" class="headerlink" title="域名知识"></a>域名知识</h1><h2 id="一、ICANN"><a href="#一、ICANN" class="headerlink" title="一、ICANN"></a>一、ICANN</h2><p>ICANN(Internet Corporation for Assigned Names and Numbers):全世界域名的最高管理机构，负责管理全世界域名系统运作，规定顶级域名TLD(top level domain)</p><h2 id="二、顶级域名（TLD）"><a href="#二、顶级域名（TLD）" class="headerlink" title="二、顶级域名（TLD）"></a>二、顶级域名（TLD）</h2><p>顶级域名：最高层级的域名。即网址的最后一部分（ps: <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 的TLD就是.com）</p><p>分类：一般性顶级域名（gTLD），比如.com .net; 国别级顶级域名（ccTLD）：代表不同国家地区，比如 .cn(中国) 、.io(英属印度洋领地)</p><h2 id="三、其他域名"><a href="#三、其他域名" class="headerlink" title="三、其他域名"></a>三、其他域名</h2><p>从右往左，依次是顶级域名，二级域名、三级域名…<br><a href="http://uni.bestwehotel.com" target="_blank" rel="noopener">http://uni.bestwehotel.com</a> : 顶级域名.com 、二级域名.bestwehotel 、 三级域名 uni</p><h2 id="四、顶级域名托管商"><a href="#四、顶级域名托管商" class="headerlink" title="四、顶级域名托管商"></a>四、顶级域名托管商</h2><p>ICANN不会去管理这些顶级域名，只会与托管商联系<br>目前，世界最大的顶级域名托管商是美国的 <a href="https://www.verisign.com/" target="_blank" rel="noopener">Verisign</a> 公司。</p><h2 id="五、根域名"><a href="#五、根域名" class="headerlink" title="五、根域名"></a>五、根域名</h2><p>顶级域名既根域名（root domain）<br>所有域名查询都必须先查询根域名，因为只有根域名才能告诉你，某个顶级域名由那台服务器管理，ICANN维护着一张表，记载顶级域名和对应的托管商。</p><p>比如，需要访问<strong><a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></strong>,就必须先询问ICANN的根域名列表，他会告诉你.com域名由Verisign托管，找到Verisign,他会告诉你example.com服务器在哪里。</p><p>由于根域名列表很少变化，大多数DNS服务商都会提供它的缓存，所以根域名查询不会那么频繁。</p><h2 id="六、NDS根区"><a href="#六、NDS根区" class="headerlink" title="六、NDS根区"></a>六、NDS根区</h2><p>根域名列表的正式名称是<a href="https://en.wikipedia.org/wiki/DNS_root_zone" target="_blank" rel="noopener">DNS根区</a>,ICANN官网可以查看这个<a href="https://www.internic.net/domain/root.zone" target="_blank" rel="noopener">根区文件</a></p><h2 id="七、根域名服务器"><a href="#七、根域名服务器" class="headerlink" title="七、根域名服务器"></a>七、根域名服务器</h2><p>DNS根域名服务器：保存DNS根区文件的服务器</p><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">引自：阮一峰的网络日志</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;域名知识&quot;&gt;&lt;a href=&quot;#域名知识&quot; class=&quot;headerlink&quot; title=&quot;域名知识&quot;&gt;&lt;/a&gt;域名知识&lt;/h1&gt;&lt;h2 id=&quot;一、ICANN&quot;&gt;&lt;a href=&quot;#一、ICANN&quot; class=&quot;headerlink&quot; title=&quot;一、I
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>javascript 运行机制</title>
    <link href="http://yoursite.com/2018/07/18/js-worker/"/>
    <id>http://yoursite.com/2018/07/18/js-worker/</id>
    <published>2018-07-18T02:51:53.663Z</published>
    <updated>2018-07-20T06:31:51.889Z</updated>
    
    <content type="html"><![CDATA[<p>7月份知识点整理</p><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><ul><li>javascript 运行机制</li><li>域名知识</li><li>前端进阶必备：JavaScript 内存机制</li><li>浏览器线程</li><li>http</li><li>cors与 xss</li></ul><h2 id="javascript-运行机制"><a href="#javascript-运行机制" class="headerlink" title="javascript 运行机制"></a>javascript 运行机制</h2><p>只要主线程空了，就会去读取”任务队列”  </p><h3 id="一、为什么是单线程"><a href="#一、为什么是单线程" class="headerlink" title="一、为什么是单线程"></a>一、为什么是单线程</h3><hr><p>javascript 语言的一大特点就是单线程</p><p> javascript的主要用途就是与用户互动，操作DOM,这就决定了他只能是单线程，否则会带来很复杂的问题（ps：假定javascript有两个线程，一个线程在某个DoM上添加节点，但是在另外一个线程删除节点，那这时候应该听那个线程的？）</p><p>利用多核CPU计算能力，HTML5提出Web Worker标准，允许javascript创建多个线程，但子线程完全受主线程控制，并且不能操作DOM(PS:并未改变单线程性质)</p><hr><h3 id="二、任务队列"><a href="#二、任务队列" class="headerlink" title="二、任务队列"></a>二、任务队列</h3><p>单线程：所有任务都必需排队，前一个任务结束才会执行下一个任务的。</p><p>任务：同步任务、异步任务</p><p>同步任务：在<strong>主线程</strong>上排队执行的任务，只有前一个执行完毕，才能执行后一个任务。  </p><p>异步任务： 不进入主线程，而是进入<strong>“任务队列”</strong>的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，改任务才会进入主线程</p><p>运行机制：事件循环（Event Loop）</p><hr><p> 1、所有同步任务都在主线程上执行，形成一个<strong>执行栈</strong>。</p><p>  2、只要异步任务有了运行结果，就在<strong>任务队列</strong>之中放置一个事件</p><p>  3、一旦<strong>执行栈</strong>中的所有同步任务执行完毕，系统就会读取<strong>任务队列</strong>，于是那些<strong>等待状态</strong>的<em>异步任务</em>结束等待状态，开始执行</p><p>  4、主线程不断重复上面的步骤。</p><hr><h3 id="事件和回调函数"><a href="#事件和回调函数" class="headerlink" title="事件和回调函数"></a>事件和回调函数</h3><p>任务队列：一个事件队列： IO设备事件，用户产生事件（比如鼠标点击，滚动…）。只要指定回调函数，事件发生时就会进入”任务队列”，等待主线程读取</p><p>任务队列：先进先出的数据结构 （定时器功能的事件：主线程要先检查执行事件，到了规定时间才能放回主线程）</p><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">引自：阮一峰的网络日志</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;7月份知识点整理&lt;/p&gt;
&lt;h1 id=&quot;js&quot;&gt;&lt;a href=&quot;#js&quot; class=&quot;headerlink&quot; title=&quot;js&quot;&gt;&lt;/a&gt;js&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;javascript 运行机制&lt;/li&gt;
&lt;li&gt;域名知识&lt;/li&gt;
&lt;li&gt;前端进阶必备：Ja
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
